using Microsoft.Extensions.Logging;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuickBill.Infrastructure;


namespace QuickBill.Application
{
    public class InvoicePdfService : IInvoicePdfService
    {
        private readonly IInvoicePdfRepository _repository;
        private readonly ILogger<InvoicePdfService> _logger;

        public InvoicePdfService(IInvoicePdfRepository repository, ILogger<InvoicePdfService> logger)
        {
            _repository = repository;
            _logger = logger;
        }

        public async Task<byte[]> GenerateInvoicePdfAsync(Guid invoiceId)
        {
            var invoiceData = await _repository.GetInvoicePdfDataAsync(invoiceId);

            if (invoiceData == null)
                throw new InvalidOperationException("Invoice data not found.");

            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(30);
                    page.Size(PageSizes.A4);

                    page.Header().Text($"Invoice #{invoiceData.InvoiceNumber}")
                        .FontSize(20).SemiBold().FontColor(Colors.Blue.Medium);

                    page.Content().PaddingVertical(10).Column(col =>
                    {
                        col.Spacing(10);

                        col.Item().Text($"Client: {invoiceData.ClientName}");
                        col.Item().Text($"Email: {invoiceData.ClientEmail}");
                        col.Item().Text($"Phone: {invoiceData.ClientPhone}");
                        col.Item().Text($"Date Issued: {invoiceData.DateIssued:yyyy-MM-dd}");
                        col.Item().Text($"Due Date: {invoiceData.DueDate:yyyy-MM-dd}");

                        col.Item().LineHorizontal(1).LineColor(Colors.Grey.Medium);

                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.ConstantColumn(50);
                                columns.ConstantColumn(70);
                                columns.ConstantColumn(70);
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("Description").Bold();
                                header.Cell().Text("Qty").Bold();
                                header.Cell().Text("Unit").Bold();
                                header.Cell().Text("Total").Bold();
                            });

                            foreach (var item in invoiceData.Items)
                            {
                                table.Cell().Text(item.Description);
                                table.Cell().Text(item.Quantity.ToString());
                                table.Cell().Text(item.UnitPrice.ToString("C"));
                                table.Cell().Text(item.Total.ToString("C"));
                            }
                        });

                        col.Item().AlignRight().Text($"Total: {invoiceData.TotalAmount:C}").Bold().FontSize(14);
                        col.Item().Text($"Notes: {invoiceData.Notes}");
                    });

                    page.Footer().AlignCenter().Text(text =>
                    {
                        text.Span("Generated by QuickBill • ").FontSize(10).FontColor(Colors.Grey.Darken2);
                        text.Span(DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")).FontSize(10).FontColor(Colors.Grey.Darken2);
                    });
                });
            });

            var pdf = document.GeneratePdf();
            return pdf;
        }
    }
}
